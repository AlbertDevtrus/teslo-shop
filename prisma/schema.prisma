generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float    @default(0)
  inStock     Int
  sizes       Size[]   @default([])
  tags        String[] @default([])
  slug        String   @unique
  gender      Gender

  category   Category @relation(fields: [categoryID], references: [id])
  categoryID String

  ProductImage ProductImage[]
  OrderItems   OrderItems[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productID], references: [id])
  productID String
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  emailVerify DateTime?
  password    String
  role        Role      @default(user)
  image       String?

  UserAddress UserAddress?
  Order       Order[]
}

model Countries {
  id   String @id @unique
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  country     Countries @relation(fields: [countriesId], references: [id])
  countriesId String

  user   User   @relation(fields: [userID], references: [id])
  userID String @unique
}

// Orden

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userID], references: [id])
  userID String

  OrderItems   OrderItems[]
  OrderAddress OrderAddress?

  transactionID String?
}

model OrderItems {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  order   Order  @relation(fields: [orderID], references: [id])
  orderID String

  product   Product @relation(fields: [productID], references: [id])
  productID String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  country   Countries @relation(fields: [countryID], references: [id])
  countryID String

  order   Order  @relation(fields: [orderID], references: [id])
  orderID String @unique
}
